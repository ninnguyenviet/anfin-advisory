import streamlit as st
import pandas as pd
from datetime import datetime
from services.bigquery_client import load_seasons_from_bq, load_season_data_new

# =========================
# Streamlit page config
# =========================
st.set_page_config(
    page_title="Advisory User Rank",
    page_icon="üèÜ",
    layout="wide"
)
st.markdown("# üèÜ Advisory User Rank Dashboard")

# =========================
# Helpers
# =========================
def format_money(val):
    if pd.isna(val):
        return "-"
    try:
        val = float(val)
    except Exception:
        return "-"
    a = abs(val)
    if a >= 1e9:
        return f"{val / 1e9:,.2f} t·ª∑"
    if a >= 1e6:
        return f"{val / 1e6:,.1f} tri·ªáu"
    if a >= 1e3:
        return f"{val / 1e3:,.0f} ngh√¨n"
    return f"{val:,.0f}"

def safe_float(x, default=0.0):
    try:
        return float(x)
    except Exception:
        return float(default)

def is_eligible(rec: dict) -> bool:
    """
    ƒêi·ªÅu ki·ªán nh·∫≠n th∆∞·ªüng m·ªôt slot:
    - ƒê√£ ƒëƒÉng k√Ω TnC (registered_tnc_at kh√¥ng null)
    - Mode = PUBLIC
    - net_pnl > 0
    """
    has_tnc = pd.notnull(rec.get("registered_tnc_at"))
    mode_public = rec.get("mode") == "PUBLIC"
    net_pnl_pos = pd.notnull(rec.get("net_pnl")) and safe_float(rec.get("net_pnl")) > 0
    return bool(has_tnc and mode_public and net_pnl_pos)

def ineligible_reason(rec: dict) -> str | None:
    if pd.isnull(rec.get("registered_tnc_at")):
        return "Ch∆∞a TnC"
    if rec.get("mode") == "PRIVATE":
        return "ƒêang b·∫≠t ·∫©n danh"
    if pd.isnull(rec.get("net_pnl")) or safe_float(rec.get("net_pnl")) <= 0:
        return "Kh√°ch b·ªã l·ªó"
    return None

def month_pool_from_df(df_month: pd.DataFrame) -> int:
    """
    Pool th√°ng = total_lot_standard t·ªëi ƒëa c·ªßa th√°ng * 10_000
    (trong d·ªØ li·ªáu, total_lot_standard l√† t·ªïng lot chu·∫©n to√†n season)
    """
    if df_month.empty:
        return 0
    total_lot_month = df_month["total_lot_standard"].max()
    total_lot_month = 0 if pd.isna(total_lot_month) else total_lot_month
    return round(total_lot_month * 10_000)

# =========================
# Load danh s√°ch seasons
# =========================
seasons_df = load_seasons_from_bq()

if seasons_df.empty:
    st.warning("Kh√¥ng t√¨m th·∫•y season n√†o t·ª´ BigQuery.")
    st.stop()

seasons_df["start_date"] = pd.to_datetime(seasons_df["start_date"])
seasons_df["end_date"] = pd.to_datetime(seasons_df["end_date"])

# S·∫Øp x·∫øp season theo th·ªùi gian ƒë·ªÉ c·ªông d·ªìn chu·∫©n
seasons_df = seasons_df.sort_values(by=["start_date", "id"]).reset_index(drop=True)

season_name_options = seasons_df["name"].tolist()
season_name_to_id = dict(zip(seasons_df["name"], seasons_df["id"]))

# M·∫∑c ƒë·ªãnh ch·ªçn season hi·ªán t·∫°i (th√°ng/nƒÉm)
now = datetime.today()
default_idx_candidates = seasons_df[
    (seasons_df["start_date"].dt.month == now.month) &
    (seasons_df["start_date"].dt.year == now.year)
].index.tolist()
default_index = default_idx_candidates[0] if default_idx_candidates else 0

selected_season_name = st.selectbox("Ch·ªçn Season:", options=season_name_options, index=default_index)
selected_season_id = season_name_to_id[selected_season_name]

# =========================
# Main
# =========================
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
    df_current = load_season_data_new([selected_season_id])
    if df_current.empty:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu cho season ƒë∆∞·ª£c ch·ªçn.")
        st.stop()
    df_current.sort_values(by=["leaderboard_id", "rank"], inplace=True)

# V·ªã tr√≠ season ƒëang ch·ªçn trong timeline
selected_idx_list = seasons_df.index[seasons_df["id"] == selected_season_id].tolist()
selected_idx = selected_idx_list[0] if selected_idx_list else 0

# Quy t·∫Øc chia th∆∞·ªüng TOP1/2/3
reward_split = [0.5, 0.3, 0.2]

# =========================
# 1) C·ªông d·ªìn ch∆∞a chi tr·∫£ c·ªßa T·∫§T C·∫¢ TH√ÅNG TR∆Ø·ªöC
# =========================
carryover_rows = []            # ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt
cumulative_unpaid_before = 0   # c·ªông d·ªìn ƒë·∫øn TR∆Ø·ªöC th√°ng ƒëang ch·ªçn

if selected_idx > 0:
    for i in range(0, selected_idx):
        prev_row = seasons_df.iloc[i]
        prev_id = prev_row["id"]
        prev_name = prev_row["name"]

        df_prev = load_season_data_new([prev_id])
        if df_prev.empty:
            continue

        pool_prev = month_pool_from_df(df_prev)
        df_prev_top3 = df_prev.sort_values(by="lot_standard", ascending=False).head(3).reset_index(drop=True)

        # Ti·ªÅn kh√¥ng tr·∫£ ƒë∆∞·ª£c trong th√°ng n√†y (do kh√¥ng ƒë·ªß ƒêK ho·∫∑c thi·∫øu slot)
        unpaid_this_month = 0

        used_ratio = 0.0
        for slot, row_prev in enumerate(df_prev_top3.itertuples()):
            if slot >= len(reward_split):
                break
            used_ratio += reward_split[slot]
            rprev = row_prev._asdict()
            portion = round(pool_prev * reward_split[slot])
            if not is_eligible(rprev):
                unpaid_this_month += portion

        # N·∫øu thi·∫øu TOP (v√≠ d·ª• ch·ªâ c√≥ 1-2 user), ph·∫ßn split c√≤n l·∫°i c≈©ng kh√¥ng th·ªÉ tr·∫£ ‚Üí c·ªông d·ªìn
        missing_ratio = max(0.0, 1.0 - used_ratio)
        if missing_ratio > 1e-9:
            unpaid_this_month += round(pool_prev * missing_ratio)

        cumulative_unpaid_before += unpaid_this_month
        carryover_rows.append({
            "Season": prev_name,
            "Pool th√°ng (VNƒê)": pool_prev,
            "Ti·ªÅn ch∆∞a chi tr·∫£ trong th√°ng (VNƒê)": unpaid_this_month,
            "C·ªông d·ªìn ƒë·∫øn cu·ªëi th√°ng (VNƒê)": cumulative_unpaid_before
        })

# =========================
# 2) Th√°ng ƒëang ch·ªçn: pool hi·ªán t·∫°i & pool S·∫¥N C√ì (c·ªông d·ªìn)
# =========================
current_pool = month_pool_from_df(df_current)
available_pool_upto_current = cumulative_unpaid_before + current_pool  # pool s·∫µn c√≥ t·ªõi th·ªùi ƒëi·ªÉm th√°ng n√†y

# =========================
# 3) Ph√¢n b·ªï tr·∫£ th∆∞·ªüng th√°ng ƒëang ch·ªçn TR√äN POOL S·∫¥N C√ì
# =========================
df_top3_current = df_current.sort_values(by="lot_standard", ascending=False).head(3).reset_index(drop=True)

bonus_given_from_available = 0         # s·ªë ti·ªÅn c√≥ th·ªÉ tr·∫£ trong th√°ng ƒëang ch·ªçn (t·ª´ pool s·∫µn c√≥)
unpaid_in_current_month = 0            # ph·∫ßn c√≤n l·∫°i kh√¥ng tr·∫£ ƒë∆∞·ª£c ‚Üí ti·∫øp t·ª•c c·ªông d·ªìn
bonuses_rows = []

used_ratio_current = 0.0
for slot, row in enumerate(df_top3_current.itertuples()):
    if slot >= len(reward_split):
        break
    r = row._asdict()
    rank = slot + 1
    ratio = reward_split[slot]
    used_ratio_current += ratio

    amount_this_slot = round(available_pool_upto_current * ratio)
    eligible = is_eligible(r)
    status = "ƒê∆∞·ª£c nh·∫≠n" if eligible else "C·ªông d·ªìn th√°ng sau"
    reason = None if eligible else ineligible_reason(r)

    if eligible:
        bonus_given_from_available += amount_this_slot
    else:
        unpaid_in_current_month += amount_this_slot

    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    bonuses_rows.append({
        "H·∫°ng": f"{medals.get(rank, '')} TOP {rank}",
        "User ID": r.get("user_id"),
        "H·ªç t√™n": r.get("full_name"),
        "T√™n gi·∫£i th∆∞·ªüng": "Chi·∫øn Th·∫ßn Lot",
        "T·ªïng Lot": r.get("lot_standard"),
        "Ti·ªÅn th∆∞·ªüng (VNƒê)": f"{amount_this_slot:,.0f}",
        "ƒêi·ªÅu ki·ªán nh·∫≠n th∆∞·ªüng": status,
        "L√Ω do": reason
    })

# N·∫øu thi·∫øu TOP (√≠t h∆°n 3 ng∆∞·ªùi), ph·∫ßn split c√≤n l·∫°i ti·∫øp t·ª•c c·ªông d·ªìn
missing_ratio_current = max(0.0, 1.0 - used_ratio_current)
if missing_ratio_current > 1e-9:
    unpaid_in_current_month += round(available_pool_upto_current * missing_ratio_current)

df_top3_final = pd.DataFrame(bonuses_rows)

# =========================
# 4) T·ªïng "Ti·ªÅn ch∆∞a chi tr·∫£" ƒê·∫æN TH√ÅNG ƒêANG CH·ªåN
#    = pool s·∫µn c√≥ ƒë·∫øn th√°ng n√†y - s·ªë ƒë√£ chi trong th√°ng n√†y
# =========================
total_unpaid_upto_current = available_pool_upto_current - bonus_given_from_available

# =========================
# KPIs
# =========================
kpi_num_seasons = df_current["leaderboard_id"].nunique()
kpi_num_users = df_current["user_id"].nunique()
total_lot_month = df_current["total_lot_standard"].max()
total_lot_month = 0 if pd.isna(total_lot_month) else total_lot_month

st.markdown("## KPIs T·ªïng quan")
col1, col2, col3, col4, col5, col6, col7 = st.columns(7)
col1.metric("S·ªë Season (ƒëang xem)", kpi_num_seasons)
col2.metric("S·ªë User tham gia (th√°ng)", kpi_num_users)
col3.metric("T·ªïng Lot c·ªßa th√°ng", f"{total_lot_month:,.2f}")
col4.metric("Pool th√°ng hi·ªán t·∫°i (VNƒê)", f"{current_pool:,.0f}")
col5.metric("Pool s·∫µn c√≥ t·ªõi th√°ng n√†y (VNƒê)", f"{available_pool_upto_current:,.0f}")
col6.metric("Ti·ªÅn th∆∞·ªüng c√≥ th·ªÉ nh·∫≠n (VNƒê)", f"{bonus_given_from_available:,.0f}")  # d√πng pool c·ªông d·ªìn
col7.metric("Ti·ªÅn ch∆∞a chi tr·∫£ (VNƒê)", f"{total_unpaid_upto_current:,.0f}")        # c√≤n l·∫°i sau khi tr·∫£

# =========================
# Top 3 th√°ng ƒëang ch·ªçn
# =========================
st.markdown("## üèÖ Top 3 User th√°ng hi·ªán t·∫°i")
st.dataframe(df_top3_final, use_container_width=True, hide_index=True)

# =========================
# (T√πy ch·ªçn) Chi ti·∫øt c·ªông d·ªìn theo t·ª´ng th√°ng tr∆∞·ªõc
# =========================
with st.expander("Chi ti·∫øt c·ªông d·ªìn theo t·ª´ng th√°ng tr∆∞·ªõc"):
    if len(carryover_rows) == 0:
        st.info("Kh√¥ng c√≥ kho·∫£n c·ªông d·ªìn n√†o t·ª´ c√°c th√°ng tr∆∞·ªõc.")
    else:
        df_carry = pd.DataFrame(carryover_rows)
        st.dataframe(df_carry, use_container_width=True, hide_index=True)
        st.caption(f"**T·ªïng c·ªông d·ªìn tr∆∞·ªõc th√°ng ƒëang ch·ªçn:** {format_money(cumulative_unpaid_before)}")

# =========================
# B·∫£ng chi ti·∫øt t·∫•t c·∫£ User (th√°ng ƒëang ch·ªçn)
# =========================
st.markdown("## üìã B·∫£ng chi ti·∫øt t·∫•t c·∫£ User (th√°ng ƒëang ch·ªçn)")

df_current["gross_pnl_fmt"] = df_current["gross_pnl"].astype("float64").apply(format_money)
df_current["net_pnl_fmt"] = df_current["net_pnl"].astype("float64").apply(format_money)
df_current["transaction_fee_fmt"] = df_current["transaction_fee"].astype("float64").apply(format_money)

st.dataframe(
    df_current[[
        "leaderboard_id", "rank", "full_name", "user_id","tkcv", "alias_name", "hidden_mode_activated_at", "mode",
        "registered_tnc_at", "lot", "lot_standard",
        "transaction_fee_fmt", "gross_pnl_fmt", "net_pnl_fmt"
    ]].rename(columns={
        "leaderboard_id": "Season",
        "rank": "H·∫°ng",
        "full_name": "T√™n",
        "user_id": "User ID",
        "tkcv": "T√†i kho·∫£n CV",
        "alias_name": "T√™n hi·ªÉn th·ªã",
        "hidden_mode_activated_at": "Ng√†y b·∫≠t ·∫©n danh",
        "mode": "Ch·∫ø ƒë·ªô",
        "registered_tnc_at": "Ng√†y ƒëƒÉng k√Ω",
        "transaction_fee_fmt": "Ph√≠ giao d·ªãch",
        "lot_standard": "Lot chu·∫©n",
        "lot": "Lot",
        "gross_pnl_fmt": "Gross PnL",
        "net_pnl_fmt": "Net PnL"
    }),
    use_container_width=True,
    hide_index=True
)

# =========================
# Xu·∫•t CSV (th√°ng ƒëang ch·ªçn)
# =========================
csv = df_current.to_csv(index=False).encode("utf-8")
st.download_button(
    label="T·∫£i d·ªØ li·ªáu CSV (th√°ng ƒëang ch·ªçn)",
    data=csv,
    file_name=f"advisory_user_ranks_{selected_season_name}.csv",
    mime="text/csv"
)
